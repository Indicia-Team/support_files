input {
  # Config file required to include occurrence associations in the index.
  # Query => autofeed mode enables tracking of downloaded records on the server-side since the
  # http_poller input plugin has no logic for importing changes.
  http_poller {
    urls => {
      indicia => {
        method => get
        url => "{{ Warehouse URL }}/index.php/services/rest/reports/library/occurrence_associations/list_for_elastic.xml"
        headers => {
          Accept => "application/json"
          Authorization => "USER:{{ User }}:SECRET:{{ Secret }}"
        }
        query => {
          proj_id => "{{ Project ID }}"
          occurrences_autofeed_proj_id => "{{ Occurrences Project ID }}"
          autofeed => "t"
          max_time => 80
        }
      }
    }
    request_timeout => 120
    connect_timeout => 20
    socket_timeout => 100
    schedule => { cron => "*/2 * * * * UTC" }
    keepalive => false
    codec => "json"
  }
}
filter {
  mutate {
    split => {
      "associations_data" => "@@"
    }
  }
  ruby {
    code => "
      if event.get('associations_data')
        event.set('associations_list', event.get('associations_data').compact.collect { |t|
          c = t.split '~'
          {
            'id' => c[0],
            'association_type' =>  c[1],
            'accepted_name' => c[2],
            'vernacular_name' => c[3]
          }
        })
      end
    "
    remove_field => "associations_data"
    remove_field => "tracking_date"
    remove_field => "tracking"
  }
  # Convert our list of fields into a nicely structured occurrence document.
  mutate {
    rename => {
      "associations_list" => "[occurrence][associations]"
    }
  }
  ruby {
    # Script to clean up nulls and empty values.
    path => "{{ Working folder path }}/logstash-rb/compact_event.rb"
  }
}
output {
  if [id] {
    elasticsearch {
      # Ensure hosts begin with https if using SSL.
      hosts => ["{{ Elasticsearch address }}"]
      # Uncomment the following when using self-signed certificates.
      # cacert => "{{ Certificate file }}"
      # Uncomment the following when using Elasticsearch security features.
      # user => "{{ Logstash user }}"
      # password => "{{ Logstash password }}"
      index => "occurrence_{{ Indicia warehouse unique name }}_index"
      # Our records need a unique ID in the index for updates.
      document_id => "{{ Indicia warehouse unique name }}|%{id}"
      action => "update"
    }
    # Uncomment the following to see the normal events output to the terminal.
    # stdout { codec => rubydebug }
  }
  else {
    elasticsearch {
      # Ensure hosts begin with https if using SSL.
      hosts => ["{{ Elasticsearch address }}"]
      # Uncomment the following when using self-signed certificates.
      # cacert => "{{ Certificate file }}"
      # Uncomment the following when using Elasticsearch security features.
      # user => "{{ Logstash user }}"
      # password => "{{ Logstash password }}"
      index => "occurrence_{{ Indicia warehouse unique name }}_errors"
    }
    # Uncomment the following to see the normal events output to the terminal.
    # stdout { codec => json }
  }
}