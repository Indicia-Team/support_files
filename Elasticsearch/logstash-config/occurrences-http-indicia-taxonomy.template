input {
  # Query => autofeed mode enables tracking of downloaded records on the server-side since the
  # http_poller input plugin has no logic for importing changes.
  # Add the following to the query section to exclude zero abundance records:
  #   zero_abundance => "0"
  # Add the following to the query section to include confidential records:
  #   confidential => "all"
  # Add the following to the query section to include unreleased records:
  #   release_status => "A"
  http_poller {
    urls => {
      indicia => {
        method => get
        url => "{{ Warehouse URL }}/index.php/services/rest/reports/library/occurrences/list_for_elastic_all_taxonomy.xml"
        headers => {
          Accept => "application/json"
          Authorization => "USER:{{ User }}:SECRET:{{ Secret }}"
        }
        query => {
          proj_id => "{{ Project ID }}"
          from_update_date => "1900-01-01"
          autofeed => "t"
          max_time => 80
          confidential => "all"
          release_status => "A"
        }
      }
    }
    request_timeout => 120
    connect_timeout => 20
    socket_timeout => 100
    schedule => { cron => "*/2 * * * * UTC" }
    keepalive => false
    codec => "json"
  }
}
filter {
  # Lookup taxon information from our YAML File and store in the
  # taxon_data_blob field. Translation can only read one field from the
  # YAML so we store all the data in a single field separated by ~.
  translate {
    dictionary_path => "{{ Working folder path }}/data/taxa.yml"
    field => "taxon_key"
    destination => "taxon_data_blob"
  }
  # Second chance if the name's search code does not point to a valid taxon,
  # use the accepted taxon key (=external key).
  if ![taxon_data_blob] {
    translate {
      dictionary_path => "{{ Working folder path }}/data/taxa.yml"
      field => "accepted_taxon_key"
      destination => "taxon_data_blob"
    }
  }
  # Split all the taxon data blob field content into separate fields. The
  # looked up taxon name/authority (as recorded) is ignored as the one in the
  # database is more likely to be reliable, e.g. if a taxon's search_code does
  # not point to a valid taxon, we don't want to overwrite the name as recorded
  # with the name looked up by external key, as the latter will be the accepted
  # name, not the name as recorded.
  csv {
    source => "taxon_data_blob"
    separator => "~"
    skip_empty_columns => true
    quote_char => "`"
    columns => [
      "taxon_name_from_lookup",
      "taxon_authority_from_lookup",
      "accepted_taxon_key",
      "accepted_taxon_name",
      "accepted_taxon_authority",
      "taxon_group_id",
      "taxon_group",
      "common_name",
      "taxon_rank",
      "taxon_rank_sort_order",
      "marine_flag",
      "freshwater_flag",
      "terrestrial_flag",
      "non_native_flag",
      "taxon_kingdom",
      "taxon_phylum",
      "taxon_class",
      "taxon_order",
      "taxon_family",
      "taxon_subfamily",
      "taxon_genus",
      "taxon_species",
      "taxon_species_key",
      "taxon_species_authority",
      "taxon_species_common_name"
    ]
    remove_field => ["taxon_data_blob", "taxon_name_from_lookup", "taxon_authority_from_lookup"]
  }
  # Lookup the taxon path data and attach to the document.
  translate {
    dictionary_path => "{{ Working folder path }}/data/taxon-paths.yml"
    field => "accepted_taxon_key"
    destination => "taxon_path_keys"
  }
  # Split the taxon path keys into separate items.
  mutate {
    split => {
      "taxon_path_keys" => ","
    }
  }
  # Convert our list of fields into a nicely structured occurrence document.
  mutate {
    rename => {
      "taxon_key" => "[taxon][taxon_id]"
      "taxa_taxon_list_id" => "[taxon][taxa_taxon_list_id]"
      "taxon_meaning_id" => "[taxon][taxon_meaning_id]"
      "taxon_list_id" => "[taxon][taxon_list][id]"
      "taxon_list_title" => "[taxon][taxon_list][title]"
      "taxon_name" => "[taxon][taxon_name]"
      "taxon_authority" => "[taxon][taxon_name_authorship]"
      "accepted_taxon_key" => "[taxon][accepted_taxon_id]"
      "accepted_taxon_name" => "[taxon][accepted_name]"
      "accepted_taxon_authority" => "[taxon][accepted_name_authorship]"
      "taxon_group_id" => "[taxon][group_id]"
      "taxon_group" => "[taxon][group]"
      "input_taxon_group_id" => "[taxon][input_group_id]"
      "input_taxon_group" => "[taxon][input_group]"
      "common_name" => "[taxon][vernacular_name]"
      "taxon_rank" => "[taxon][taxon_rank]"
      "taxon_rank_sort_order" => "[taxon][taxon_rank_sort_order]"
      "marine_flag" => "[taxon][marine]"
      "freshwater_flag" => "[taxon][freshwater]"
      "terrestrial_flag" => "[taxon][terrestrial]"
      "non_native_flag" => "[taxon][non_native]"
      "taxon_kingdom" => "[taxon][kingdom]"
      "taxon_phylum" => "[taxon][phylum]"
      "taxon_class" => "[taxon][class]"
      "taxon_order" => "[taxon][order]"
      "taxon_family" => "[taxon][family]"
      "taxon_subfamily" => "[taxon][subfamily]"
      "taxon_genus" => "[taxon][genus]"
      "taxon_species" => "[taxon][species]"
      "taxon_species_key" => "[taxon][species_taxon_id]"
      "taxon_species_authority" => "[taxon][species_authorship]"
      "taxon_species_common_name" => "[taxon][species_vernacular]"
      "taxon_path_keys" => "[taxon][higher_taxon_ids]"
    }
  }
  ruby {
    # Script to clean up nulls and empty values.
    path => "{{ Working folder path }}/logstash-rb/compact_event.rb"
  }
}
output {
  if [id] {
    elasticsearch {
      hosts => ["{{ Elasticsearch address }}"]
      index => "occurrence_{{ Indicia warehouse unique name }}_index"
      # Our records need a unique ID in the index for updates.
      document_id => "{{ Indicia warehouse unique name }}|%{id}"
      action => "update"
    }
    # Uncomment the following to see the normal events output to the terminal.
    # stdout { codec => json }
    # Uncomment the following and fill in the elasticsearch user details when
    # using Elasticsearch security features.
    # user => "elastic"
    # password => "..."
    # ssl_enabled => true
    # Or, uncomment the following if not using https to access Elasticsearch.
    # ssl_enabled => false
  }
  else {
    elasticsearch {
      hosts => ["{{ Elasticsearch address }}"]
      index => "occurrence_{{ Indicia warehouse unique name }}_errors"
    }
    # Uncomment the following to see the error events output to the terminal.
    # stdout { codec => json }
    # Uncomment the following and fill in the elasticsearch user details when
    # using Elasticsearch security features.
    # user => "elastic"
    # password => "..."
    # ssl_enabled => true
    # Or, uncomment the following if not using https to access Elasticsearch.
    # ssl_enabled => false
  }
}