input {
  # Query => utofeed mode enables tracking of downloaded records on the server-side since the
  # http_poller input plugin has no logic for importing changes.
  # Uncomment the query => confidential line to include confidential records.
  # Uncomment the query => release_status line to include unreleased records.
  http_poller {
    urls => {
      indicia => {
        method => get
        url => "{{ Warehouse URL }}/index.php/services/rest/reports/library/occurrences/list_for_elastic.xml"
        headers => {
          Accept => "application/json"
          Authorization => "USER:{{ User }}:SECRET:{{ Secret }}"
        }
        query => {
          proj_id => "{{ Project ID }}"
          from_update_date => "1900-01-01"
          autofeed => "t"
          # confidential => "all"
          # release_status => "A"
        }
      }
    }
    request_timeout => 120
    connect_timeout => 30
    socket_timeout => 60
    schedule => { cron => "*/2 * * * * UTC" }
    keepalive => false
    codec => "json"
  }
}
filter {
  # Lookup taxon information from our YAML File and store in the
  # taxon_data_blob field. Translation can only read one field from the
  # YAML so we store all the data in a single field separated by ~.
  translate {
    dictionary_path => "{{ Working folder path }}/data/taxa.yml"
    field => "taxon_key"
    destination => "taxon_data_blob"
  }
  # Split all the taxon data blob field content into separate fields.
  csv {
    source => "taxon_data_blob"
    separator => "~"
    skip_empty_columns => true
    quote_char => "`"
    columns => [
      "accepted_taxon_key",
      "taxon_name",
      "authority",
      "taxon_group",
      "common_name",
      "taxon_rank",
      "taxon_rank_sort_order",
      "marine_flag",
      "taxon_kingdom",
      "taxon_kingdom_key",
      "taxon_phylum",
      "taxon_phylum_key",
      "taxon_class",
      "taxon_class_key",
      "taxon_order",
      "taxon_order_key",
      "taxon_family",
      "taxon_family_key",
      "taxon_subfamily",
      "taxon_subfamily_key",
      "taxon_genus",
      "taxon_genus_key",
      "taxon_species",
      "taxon_species_key"
    ]
    remove_field => "taxon_data_blob"
  }
  translate {
    dictionary_path => "{{ Working folder path }}/data/taxon-paths.yml"
    field => "accepted_taxon_key"
    destination => "taxon_path_keys"
  }
  mutate {
    split => {
      "taxon_path_keys" => ","
    }
  }
  mutate {
    split => {
      "indexed_location_ids" => ","
    }
  }
  translate {
    dictionary_path => "/Users/john/Documents/Git repos/indicia_support_files/Elasticsearch/data/locations.yml"
    field => "indexed_location_ids"
    iterate_on => "indexed_location_ids"
    destination => "locations_blob"
  }
  ruby {
    code => "
      if event.get('locations_blob')
        event.set('locations', event.get('locations_blob').collect { |t|
          c = t.split '~'
          {
            'name' =>  c[0],
            'code' => c[1],
            'type' => c[2]
          }
        })
      end
    "
    remove_field => "locations_blob"
  }
  mutate {
    rename => {
      "point_x" => "[locality][point][lon]"
      "point_y" => "[locality][point][lat]"
      "geom" => "[locality][geom]"
      "output_sref" => "[locality][output_sref]"
      "output_sref_system" => "[locality][output_sref_system]"
      "given_locality_name" => "[locality][given_name]"
      "recorded_location_id" => "[locality][recorded][id]"
      "recorded_location_name" => "[locality][recorded][name]"
      "recorded_parent_location_id" => "[locality][recorded][parent][id]"
      "recorded_parent_location_name" => "[locality][recorded][parent][name]"
      "indexed_location_ids" => "[locality][location_ids]"
      "locations" => "[locality][locations]"
      "date_start" => "[date][date_start]"
      "date_end" => "[date][date_end]"
      "day_of_year" => "[date][day_of_year]"
      "week_of_year" => "[date][week_of_year]"
      "month_of_year" => "[date][month_of_year]"
      "year" => "[date][year]"
      "taxon_key" => "[taxon][key]"
      "accepted_taxon_key" => "[taxon][accepted_key]"
      "taxon_name" => "[taxon][name]"
      "authority" => "[taxon][authority]"
      "taxon_group" => "[taxon][group]"
      "common_name" => "[taxon][common_name]"
      "taxon_rank" => "[taxon][rank]"
      "taxon_rank_sort_order" => "[taxon][rank_sort_order]"
      "marine_flag" => "[taxon][marine]"
      "taxon_kingdom" => "[taxon][kingdom][name]"
      "taxon_kingdom_key" => "[taxon][kingdom][key]"
      "taxon_phylum" => "[taxon][phylum][name]"
      "taxon_phylum_key" => "[taxon][phylum][key]"
      "taxon_class" => "[taxon][class][name]"
      "taxon_class_key" => "[taxon][class][key]"
      "taxon_order" => "[taxon][order][name]"
      "taxon_order_key" => "[taxon][order][key]"
      "taxon_family" => "[taxon][family][name]"
      "taxon_family_key" => "[taxon][family][key]"
      "taxon_subfamily" => "[taxon][subfamily][name]"
      "taxon_subfamily_key" => "[taxon][subfamily][key]"
      "taxon_genus" => "[taxon][genus][name]"
      "taxon_genus_key" => "[taxon][genus][key]"
      "taxon_species" => "[taxon][species][name]"
      "taxon_species_key" => "[taxon][species][key]"
      "taxon_path_keys" => "[taxon][path_keys]"
      "comment" => "[comments][record_comment]"
      "sample_comment" => "[comments][sample_comment]"
      "attr_sex" => "[record_attributes][sex]"
      "attr_stage" => "[record_attributes][stage]"
      "attr_sex_stage" => "[record_attributes][sex_stage]"
      "attr_sex_stage_count" => "[record_attributes][sex_stage_count]"
      "attr_certainty" => "[record_attributes][recorder_certainty]"
      "attr_det_name" => "[record_attributes][determiner_name]"
      "attr_biotope" => "[sample_attributes][biotope]"
      "attr_sample_method" => "[sample_attributes][method]"
      "created_on" => "[metadata][created_on]"
      "updated_on" => "[metadata][updated_on]"
      "record_status" => "[metadata][record_status]"
      "record_substatus" => "[metadata][record_substatus]"
      "verified_by_id" => "[metadata][verified_by_id]"
      "verifier" => "[metadata][verifier]"
      "verified_on" => "[metadata][verified_on]"
      "data_cleaner_info" => "[metadata][data_cleaner_info]"
      "query" => "[metadata][query]"
      "sensitive" => "[metadata][sensitive]"
      "sensitivity_precision" => "[metadata][sensitivity_precision]"
      "sensitivity_blur" => "[metadata][sensitivity_blur]"
      "confidential" => "[metadata][confidential]"
      "release_status" => "[metadata][release_status]"
    }
  }
  ruby {
    # Script to clean up nulls and empty values.
    path => "{{ Working folder path }}/logstash-rb/compact_event.rb"
  }
}
output {
  elasticsearch {
    hosts => ["{{ Elasticsearch address }}"]
    index => "occurrence_{{ Indicia warehouse unique name }}_index"
    # Our records need a unique ID in the index for updates.
    document_id => "{{ Indicia warehouse unique name }}|%{id}"
  }
  # Uncomment the following to see the data output to the terminal.
  # stdout { codec => json }
}