-- Various fixes to the taxon hierarchy caused by apparent problems with the taxon import process (time of writing is 26/5/2020, so these problems may or may not be present in future importer versions)



-- Remove the latest taxon in groups of duplicate non-preferred species with the same meaning (as non preferred they don't have ay attribute values either)
update indicia.taxa_taxon_lists
set deleted=true,updated_on=now(),updated_by_id=1
where id in 
(select max(id)
from indicia.cache_taxa_taxon_lists
where taxon_list_id=1 and preferred = false and taxon || taxon_meaning_id || coalesce(authority,'') in 

(select taxon || taxon_meaning_id || coalesce(authority,'')
from indicia.cache_taxa_taxon_lists
where taxon_list_id=1 and preferred = false
group by taxon,taxon_meaning_id,authority
having count(*) > 1) 

group by taxon || coalesce(authority,''), taxon_meaning_id
order by taxon || coalesce(authority,''), taxon_meaning_id);




-- SEE NOTE BELOW, WILL PROBABLY NEED MORE THAN ONE RUN
-- Similar but use preferred_taxon instead of taxon_meaning_id. This should not really be needed apart there are problems where the taxon_meaning_id doesn't match the preferred taxon. (that is fixed in a minute). Will also need to take into account that there might be more 2 in the groups of duplicates, so we need to run exactly the same sql again until we get no results! (noting that the result will takes some time to come through to the cache_taxa_taxon_lists table
update indicia.taxa_taxon_lists
set deleted=true,updated_on=now(),updated_by_id=1
where id in 
(select id
from indicia.cache_taxa_taxon_lists
where id in

(select max(id)
from indicia.cache_taxa_taxon_lists
where taxon_list_id=1 and preferred=false
group by taxon,preferred_taxon,authority
having count(*) > 1)

-- don't delete the preferred species
and id not in
(select id from indicia.cache_taxa_taxon_lists where preferred = true)

-- never delete species which have attribute values (excluding red list)
and id not in (
select id
from indicia.cache_taxa_taxon_lists
where id in 
(select taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921))));




-- Correct taxa whose taxon meaning id does not match the meaning of the species in the preferred_taxa_taxon_list_id column
update indicia.taxa_taxon_lists ttl
set taxon_meaning_id=cttl_pref.taxon_meaning_id,updated_on=now(),updated_by_id=1
from indicia.cache_taxa_taxon_lists cttl
join indicia.cache_taxa_taxon_lists cttl_pref on cttl_pref.id = cttl.preferred_taxa_taxon_list_id
where cttl.id=ttl.id
and ttl.taxon_meaning_id != cttl_pref.taxon_meaning_id

and ttl.taxon_list_id  = 1 
and cttl.taxon_list_id  = 1 
and cttl_pref.taxon_list_id = 1;


-- Set preferred = false if the ttl id doesn't match the same id as the preferred species
update indicia.taxa_taxon_lists
set preferred=false,updated_on=now(),updated_by_id=1
where id in 
(select id
from indicia.cache_taxa_taxon_lists
where preferred=true and preferred_taxa_taxon_list_id != id and taxon_list_id=1
and id not in 
(select taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921)));

-- This code deletes all the non preferred items whose preferred taxon set to be the same name as the current taxon, but whose preferred_taxa_taxon_id id is pointing at another taxon which is preferred and has the same taxon authority
-- i.e. it is removing some types of duplicates
-- (Note this also needed a manual check to make sure these are all preferred in the spreadsheet, as we are removing the unpreferred item)
update indicia.taxa_taxon_lists
set deleted=true,updated_on=now(),updated_by_id=1
where id in 
(select cttl.id
from indicia.cache_taxa_taxon_lists cttl
join indicia.cache_taxa_taxon_lists cttl_linked_pref on cttl_linked_pref.id = cttl.preferred_taxa_taxon_list_id and cttl_linked_pref.preferred=true and cttl_linked_pref.taxon_list_id=1
where cttl.preferred_taxon=cttl.taxon and cttl.preferred_taxa_taxon_list_id != cttl.id
and cttl.taxon_meaning_id=cttl_linked_pref.taxon_meaning_id AND cttl.taxon || ' ' || coalesce(cttl.authority,'') = cttl_linked_pref.taxon || ' ' || coalesce(cttl_linked_pref.authority,'')
and cttl.preferred=false 
and cttl.taxon_list_id=1
and cttl.id not in 
(select id 
from indicia.cache_taxa_taxon_lists
where id in
(select taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921))
)
and cttl.preferred_taxa_taxon_list_id in 
(
select cttl.id
from indicia.cache_taxa_taxon_lists cttl
where cttl.preferred_taxon=cttl.taxon and cttl.preferred_taxa_taxon_list_id = cttl.id
)
order by cttl.taxon);

-- Delete non preferred species who preferred_taxon name is the same as the species but the preferred_taxa_taxon_list_id is a different preferred species ID  with the same name
-- NOTE: If possible, manually check that the remaing preferred species are actually preferred in the latest spreadsheet
update indicia.taxa_taxon_lists
set deleted=true,updated_on=now(),updated_by_id=1
where id in 
(select cttl.id
from indicia.cache_taxa_taxon_lists cttl
join indicia.cache_taxa_taxon_lists cttl_linked_pref on cttl_linked_pref.id = cttl.preferred_taxa_taxon_list_id
where cttl.preferred_taxon=cttl.taxon and cttl.preferred_taxa_taxon_list_id != cttl.id
and cttl.taxon_meaning_id=cttl_linked_pref.taxon_meaning_id and cttl.taxon_list_id=1
and cttl.id not in 
(select taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921))
and cttl.preferred_taxa_taxon_list_id in 
(
select cttl.id
from indicia.cache_taxa_taxon_lists cttl
where cttl.preferred_taxon=cttl.taxon and cttl.preferred_taxa_taxon_list_id = cttl.id
)
order by cttl.taxon);


-- Remove latest non preferred item with the same meaning id
update indicia.taxa_taxon_lists
set deleted=true,updated_on=now(),updated_by_id=1
where id in
(select max(id)
from indicia.cache_taxa_taxon_lists
where 
taxon_list_id = 1 and preferred=false and

id not in
(select distinct taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921))

and
taxon || coalesce(authority,'') in
(select taxon || coalesce(authority,'')
from indicia.cache_taxa_taxon_lists 
where taxon_list_id = 1 and preferred=false 
group by taxon || coalesce(authority,''),taxon_meaning_id
having count(*) > 1)
Group by taxon || ' ' || coalesce(authority,''));


-- Do same for preferred
update indicia.taxa_taxon_lists
set deleted=true,updated_on=now(),updated_by_id=1
where id in
(select max(id)
from indicia.cache_taxa_taxon_lists
where 
taxon_list_id = 1 and preferred=true and

id not in
(select distinct taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921))

and
taxon || coalesce(authority,'') in
(select taxon || coalesce(authority,'')
from indicia.cache_taxa_taxon_lists 
where taxon_list_id = 1 and preferred=true
group by taxon || coalesce(authority,''),taxon_meaning_id
having count(*) > 1)
Group by taxon || ' ' || coalesce(authority,''));

-- update taxon_rank on taxa which have empty taxon ranks but an equivalent is not empty
update indicia.taxa t1
set taxon_rank_id=t_has_rank.taxon_rank_id,updated_on=now(),updated_by_id=1
from indicia.taxa t2
join indicia.taxa t_has_rank on t2.taxon = t_has_rank.taxon and t_has_rank.taxon_rank_id is not null
and t_has_rank.deleted=false
where t1.id=t2.id AND t2.taxon_rank_id is null;

-- Fix empty taxon ranks for species
-- (Note: we check for a blank space as name of taxa at the species taxon rank are multi-word)
update indicia.taxa
set taxon_rank_id=3,updated_on=now(),updated_by_id=1
where taxon_rank_id is null and taxon like '% %' and id in
(select taxon_id
from indicia.taxa_taxon_lists
where taxon_list_id = 1
order by id desc);

-- Update taxon_rank for species with a hyphen in the name as these appear to be species in the spreadsheet
update indicia.taxa
set taxon_rank_id=3,updated_on=now(),updated_by_id=1
where taxon_rank_id is null and taxon like '%-%' and id in
(select taxon_id
from indicia.taxa_taxon_lists
where taxon_list_id = 1
order by id desc);

-- Fix cache_tables, for some reason they were not up to date
update indicia.cache_taxa_taxon_lists
set taxon_rank_id = 3, taxon_rank='Species'
where taxon_rank_id is null and taxon like '% %' and taxon_list_id = 1
and taxon in
(select taxon from indicia.taxa where taxon_rank_id IS NOT NULL);

-- Check for empty taxon ranks for remaining non species ranks. Examine any results in comparison to spreadsheet and set -- rank as required
select id,taxon
from indicia.cache_taxa_taxon_lists
where taxon_rank_id is null and taxon_list_id = 1
order by id desc;


-- Point species without a parent_id at their genus
update indicia.taxa_taxon_lists cttl1
set parent_id = genus.id,updated_on=now(),updated_by_id=1
from indicia.cache_taxa_taxon_lists cttl2 
left join indicia.cache_taxa_taxon_lists genus on genus.taxon = substring(cttl2.taxon from '[^ ]+'::text) and genus.taxon_list_id = 1
where cttl1.id = cttl2.id and 
cttl2.parent_id is null and cttl2.taxon_rank_id = 3 and cttl2.taxon_list_id = 1
and cttl1.parent_id IS NULL
and genus.taxon is not null;



-- THE FOLLOWING ARE JUST DATA CHECKS, NOT UPDATE STATEMENTS
-- If this returns anything, then set the parent_id and taxon rank manually
select id,taxon,parent_id,taxon_rank_id
from indicia.cache_taxa_taxon_lists
where taxon_rank_id is null and taxon_list_id = 1 and preferred=true and parent_id is null
and taxon like '% %'
and id in
(select distinct taxa_taxon_list_id 
from indicia.taxa_taxon_list_attribute_values where deleted=false 
and taxa_taxon_list_attribute_id not in (1076,1077,1920,1921))
order by id desc;

-- This should return nothing (all none species ranks should have children)
select id
from indicia.cache_taxa_taxon_lists
where 
taxon_list_id = 1 and preferred=true and taxon_rank_id!=3 
and id not in
(select parent_id from indicia.cache_taxa_taxon_lists);

-- This should return nothing
select id,taxon,preferred
from indicia.cache_taxa_taxon_lists
where taxon_rank_id=3 and taxon_list_id = 1 and taxon || coalesce(authority,'') in
(select taxon || coalesce(authority,'')
from indicia.cache_taxa_taxon_lists 
where taxon_rank_id=3 and taxon_list_id = 1
group by taxon || coalesce(authority,'')
having count(*) > 1)
order by taxon || ' ' || authority asc,id desc;

-- This should return nothing, if it does, check the database to see if that taxon has another correct entry and then delete the broken ones
select cttl.id,cttl.taxon,cttl.preferred
from indicia.cache_taxa_taxon_lists cttl
join indicia.cache_taxa_taxon_lists cttl_pref on cttl_pref.id = cttl.preferred_taxa_taxon_list_id
where cttl.taxon_meaning_id != cttl_pref.taxon_meaning_id
and cttl.taxon_list_id  = 1 
and cttl_pref.taxon_list_id = 1;






-- Make sure there are no items which are deleted and have children
-- This should return nothing (e.g. no deleted Genus which have species under them)
select count(ttl.id)
from indicia.taxa_taxon_lists ttl
where ttl.deleted=true and ttl.taxon_list_id = 1 and ttl.id in
(select parent_id
from indicia.taxa_taxon_lists
where deleted=false and taxon_list_id = 1);

select count(*)
from indicia.taxa_taxon_lists
where deleted=false and taxon_list_id = 1 and parent_id IS NOT NULL
and parent_id not in
(select id
from indicia.cache_taxa_taxon_lists where taxon_list_id = 1);


-- Check any remaining taxa without rank, fix manually. In my case there were lots, but I check of the spreadsheet showed they were all "Species" rank and could be fixed easily with update statement
select id,taxon
from indicia.cache_taxa_taxon_lists
where taxon_rank_id is null and taxon_list_id = 1;

-- Make sure there are no species left without a parent_id
-- Manually fix if needed as these will probably be special cases
select id,taxon,parent_id from indicia.cache_taxa_taxon_lists where parent_id is null and taxon_rank_id = 3 and taxon_list_id = 1;

--Make sure there aren't any images for deleted taxa that don't have another taxa with the same meaning using the image
select count(*) 
from indicia.taxa_taxon_lists 
where deleted=true 
and taxon_meaning_id in 
(select taxon_meaning_id
from indicia.taxa_taxon_lists
where deleted=false and taxon_meaning_id not in
(select taxon_meaning_id 
from indicia.taxa_taxon_lists 
where deleted=false));


-- Check for any species where the parent_id does not match between cache and non-cache_tables
-- Manually correct after examination....an example is given before if you determine the parent_id is correct in the cache table
-- The parent_id of synonyms should match its preferred species
select cttl.id,cttl.taxon,cttl.preferred,cttl.parent_id,ttl.parent_id,ttl_parent.taxon as non_cache_parent,cache_parent.taxon as cache_parent
from indicia.cache_taxa_taxon_lists cttl
left join indicia.taxa_taxon_lists ttl on ttl.id = cttl.id and ttl.deleted=false
left join indicia.cache_taxa_taxon_lists ttl_parent on ttl_parent.id = ttl.parent_id
left join indicia.cache_taxa_taxon_lists cache_parent on cache_parent.id = cttl.parent_id
where cttl.parent_id != ttl.parent_id and cttl.taxon_list_id = 1;

--update indicia.taxa_taxon_lists ttl
--set parent_id = cttl.parent_id,updated_on=now(),updated_by_id=1
--from indicia.cache_taxa_taxon_lists cttl
--where ttl.id=cttl.id
--and cttl.parent_id != ttl.parent_id and cttl.taxon_list_id = 1;


-- Make sure all synonyms have same parent_id as preferred species.
-- Manually fix if issues found
select cttl.id,cttl.taxon,cttl.parent_id,cttl.preferred_taxa_taxon_list_id,preferred_item.taxon,preferred_item.parent_id
from indicia.cache_taxa_taxon_lists cttl 
join indicia.cache_taxa_taxon_lists preferred_item on preferred_item.id =  cttl.preferred_taxa_taxon_list_id
where cttl.parent_id != preferred_item.parent_id;